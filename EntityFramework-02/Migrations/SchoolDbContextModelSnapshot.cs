// <auto-generated />
using System;
using EntityFramework_02.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityFramework_02.Migrations
{
    [DbContext(typeof(SchoolDbContext))]
    partial class SchoolDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityFramework_02.Entities.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasAnnotation("StringLength", (200, 300));

                    b.Property<double>("Duration")
                        .HasColumnType("float")
                        .HasAnnotation("Range", (2, 16));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasAnnotation("StringLength", (50, 20));

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.HasKey("CourseID");

                    b.HasIndex("TopicID");

                    b.ToTable("Course", "dbo");
                });

            modelBuilder.Entity("EntityFramework_02.Entities.Course_Inst", b =>
                {
                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Evaluate")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.HasKey("InstructorID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("Course_Inst", "dbo");
                });

            modelBuilder.Entity("EntityFramework_02.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"));

                    b.Property<DateTime>("HiringDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("GETDATE()");

                    b.Property<int?>("InstructorID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasAnnotation("StringLength", (50, 20));

                    b.HasKey("DepartmentID");

                    b.ToTable("Department", "dbo");
                });

            modelBuilder.Entity("EntityFramework_02.Entities.Instructor", b =>
                {
                    b.Property<int>("InstructorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorID"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasAnnotation("StringLength", (40, 10));

                    b.Property<double>("Bouns")
                        .HasColumnType("float");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<double>("HourRate")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasAnnotation("StringLength", (50, 20));

                    b.Property<decimal>("Salary")
                        .HasColumnType("Money")
                        .HasAnnotation("Range", (2000, 10000));

                    b.HasKey("InstructorID");

                    b.HasIndex("DepartmentID")
                        .IsUnique()
                        .HasFilter("[DepartmentID] IS NOT NULL");

                    b.ToTable("Instructor", "dbo");
                });

            modelBuilder.Entity("EntityFramework_02.Entities.Stud_Course", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<double>("Grade")
                        .HasColumnType("float")
                        .HasAnnotation("Range", (0, 100));

                    b.HasKey("StudentID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("Stud_Course", "dbo");
                });

            modelBuilder.Entity("EntityFramework_02.Entities.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasAnnotation("Range", (21, 90));

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasAnnotation("StringLength", (50, 20));

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasAnnotation("StringLength", (50, 20));

                    b.HasKey("StudentID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Student", "dbo");
                });

            modelBuilder.Entity("EntityFramework_02.Entities.Topic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasAnnotation("StringLength", (50, 20));

                    b.HasKey("ID");

                    b.ToTable("Topic", "dbo");
                });

            modelBuilder.Entity("EntityFramework_02.Entities.Course", b =>
                {
                    b.HasOne("EntityFramework_02.Entities.Topic", "Topic")
                        .WithMany("Courses")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EntityFramework_02.Entities.Course_Inst", b =>
                {
                    b.HasOne("EntityFramework_02.Entities.Course", "Course")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFramework_02.Entities.Instructor", "Instructor")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("EntityFramework_02.Entities.Instructor", b =>
                {
                    b.HasOne("EntityFramework_02.Entities.Department", "Department")
                        .WithOne("Instructor")
                        .HasForeignKey("EntityFramework_02.Entities.Instructor", "DepartmentID");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EntityFramework_02.Entities.Stud_Course", b =>
                {
                    b.HasOne("EntityFramework_02.Entities.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFramework_02.Entities.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EntityFramework_02.Entities.Student", b =>
                {
                    b.HasOne("EntityFramework_02.Entities.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EntityFramework_02.Entities.Course", b =>
                {
                    b.Navigation("CourseInstructors");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("EntityFramework_02.Entities.Department", b =>
                {
                    b.Navigation("Instructor")
                        .IsRequired();

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EntityFramework_02.Entities.Instructor", b =>
                {
                    b.Navigation("CourseInstructors");
                });

            modelBuilder.Entity("EntityFramework_02.Entities.Student", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("EntityFramework_02.Entities.Topic", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
